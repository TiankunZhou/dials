# Variables:
#   CACHE_VERSION: unique cache identifier
#   CURRENT_WEEK: weekly changing cache identifier
#   PYTHON_VERSION: string in the form of "3.x"
#   TODAY_ISO: today's date in ISO format, eg. "20200531"

steps:

# Obtain a shallow clone of the DIALS repository.
# DIALS will not be able to report proper version numbers
- checkout: self
  path: ./dials-checkout
  fetchDepth: 1
  displayName: Checkout $(Build.SourceBranch)

# Get all other source repositories from cache if available
# Allow day-to-day incremental cache updates
# Flush the cache once a week and whenever the bootstrap script is modified
- task: Cache@2
  inputs:
    key: 'debug-repositories'
    restoreKeys: |
      "repositories" | "$(CACHE_VERSION)-$(CURRENT_WEEK)" | installer/bootstrap.py
    path: $(Pipeline.Workspace)/modules
    cacheHitVar: REPOSITORIES_CACHED
  displayName: Restore repository cache

# If other source repositories are not cached then download
# them using the bootstrap script
- bash: |
    set -e
    mkdir -p modules
    ln -nsf ../dials-checkout modules/dials
    python modules/dials/installer/bootstrap.py update
  displayName: Repository checkout (initial)
  workingDirectory: $(Pipeline.Workspace)
  condition: eq(variables.REPOSITORIES_CACHED, 'false')

# Get a ready-made DIALS conda environment from cache if available
# Allow day-to-day incremental cache updates
# Flush the cache once a week and whenever the environment specification is modified
# Cache is not shared across operating systems and python versions
- task: Cache@2
  inputs:
    key: 'debug-environment'
    restoreKeys: |
      "base" | "$(CACHE_VERSION)-$(CURRENT_WEEK)" | "$(Agent.OS)-$(Agent.Version)-$(Pipeline.Workspace)" | "$(PYTHON_VERSION)" | ${{ parameters.conda_environment }}
    path: $(Pipeline.Workspace)/conda_base
    cacheHitVar: BASE_CACHED
  displayName: Restore environment cache

# If the conda environment could not be loaded from cache then
# create a new one using the bootstrap script
- script: |
    python modules/dials/installer/bootstrap.py base --python $(PYTHON_VERSION)

    # Immediately recover disk space used by miniconda installation
    du -sh miniconda
    rm -r miniconda
  displayName: Create python $(PYTHON_VERSION) environment
  workingDirectory: $(Pipeline.Workspace)
  condition: eq(variables.BASE_CACHED, 'false')

# Get a ready-made DIALS build directory from cache if available
# Allow day-to-day incremental cache updates
# Flush the cache once a week and whenever the environment specification
# or the bootstrap script is modified.
# Cache is not shared across operating systems and python versions
- task: Cache@2
  inputs:
    key: 'debug-build-1'
    restoreKeys: |
      "build" | "$(CACHE_VERSION)-$(CURRENT_WEEK)" | "$(Agent.OS)-$(Agent.Version)-$(Pipeline.Workspace)" | "$(PYTHON_VERSION)" | installer/bootstrap.py | ${{ parameters.conda_environment }}
    path: $(Pipeline.Workspace)/build
    cacheHitVar: BUILD_CACHED
  displayName: Restore cached build

# If the build directory could not be loaded from cache then
# create a new one using the bootstrap script
- bash: |
    set -e
    python modules/dials/installer/bootstrap.py build
    cp -v dials build/activate  # ensure a copy is kept in the cache
  displayName: DIALS build (initial)
  workingDirectory: $(Pipeline.Workspace)
  condition: eq(variables.BUILD_CACHED, 'false')

# If the build directory was loaded (or kick-started) from cache then
# do an incremental build
- bash: |
    set -e
    cp -v build/activate dials  # restore copy from the cache
    . dials
    cd build
    make reconf
  displayName: DIALS build (incremental)
  workingDirectory: $(Pipeline.Workspace)
  condition: ne(variables.BUILD_CACHED, 'false')

- bash: |
    ls -la scitbx_array_family_flex_ext.so
    shasum -a 256 scitbx_array_family_flex_ext.so
  displayName: hash output
  workingDirectory: $(Pipeline.Workspace)/build/lib

- publish: $(Pipeline.Workspace)/build/lib
  artifact: BuildLibraries
